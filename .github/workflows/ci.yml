name: VCS Tutorials CI/CD Pipeline

# Trigger the workflow on push to main branch and pull requests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Define jobs that run in parallel
jobs:
  # Job 1: Code Quality and Syntax Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint
        
    - name: Syntax check with flake8
      run: |
        # Check Python syntax errors and undefined names - exclude virtual environment and library directories
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__,.git,media
        # Check for basic style issues in your project files only (non-blocking)
        flake8 *.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

  # Job 2: Manim Animation Testing
  manim-tests:
    name: Manim Animation Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          libcairo2-dev \
          libpango1.0-dev \
          libgirepository1.0-dev \
          libglib2.0-dev \
          libgdk-pixbuf2.0-dev \
          libffi-dev \
          pkg-config
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install importlib-metadata first for Python < 3.10 compatibility
        pip install importlib-metadata>=4.0.0
        pip install -r requirements.txt
        
    - name: Test Manim imports
      run: |
        # Test basic imports with error handling
        python -c "
        try:
            import manim
            print('‚úÖ Manim version:', manim.__version__)
        except Exception as e:
            print('‚ùå Manim import failed:', str(e))
            exit(1)
        "
        python -c "
        try:
            import numpy
            print('‚úÖ NumPy version:', numpy.__version__)
        except Exception as e:
            print('‚ùå NumPy import failed:', str(e))
            exit(1)
        "
        
    - name: Validate Python scripts syntax
      run: |
        # Check if all Python files can be parsed
        for file in *.py; do
          if [ -f "$file" ]; then
            echo "Checking syntax of $file"
            python -m py_compile "$file"
          fi
        done
        
    - name: Test animation imports
      run: |
        # Test if each animation script can import without errors
        echo "üîç Testing animation script imports..."
        failed_imports=0
        
        for file in *.py; do
          if [ -f "$file" ]; then
            echo "Testing imports for $file"
            if python -c "
        import sys
        sys.path.append('.')
        try:
            import ${file%.py}
            print('‚úÖ $file imports successfully')
        except ImportError as e:
            if 'manim' in str(e).lower():
                print('‚ö†Ô∏è $file has Manim dependency (expected)')
            else:
                print('‚ùå $file import failed:', str(e))
                raise
        except Exception as e:
            print('‚ùå $file import failed:', str(e))
            raise
        " 2>/dev/null; then
              echo "‚úÖ $file - OK"
            else
              echo "‚ö†Ô∏è $file - Import issues (may be normal for Manim scripts)"
            fi
          fi
        done
        
        echo "üìä Import testing completed"
        
    # Commented out: Full animation rendering (too resource intensive for CI)
    # - name: Test sample animation rendering
    #   run: |
    #     # Test one quick animation to ensure basic rendering works
    #     timeout 60 python -m manim -pql --disable_caching NASD.py FullConceptAnimation || echo "Animation test timed out (expected)"

  # Job 3: Documentation Checks
  documentation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check README exists and is valid
      run: |
        if [ ! -f "README.md" ]; then
          echo "‚ùå README.md not found"
          exit 1
        fi
        echo "‚úÖ README.md exists"
        
    - name: Check for required documentation sections
      run: |
        if ! grep -q "## Installation" README.md; then
          echo "‚ö†Ô∏è README missing Installation section"
        fi
        if ! grep -q "## Usage" README.md || ! grep -q "## Quick Start" README.md; then
          echo "‚ö†Ô∏è README missing Usage/Quick Start section"
        fi
        if ! grep -q "manim" README.md; then
          echo "‚ö†Ô∏è README should mention Manim"
        fi
        echo "‚úÖ Documentation checks completed"
        
    - name: Validate project structure
      run: |
        # Check if key files exist
        required_files=("CLAUDE.md")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ö†Ô∏è $file missing (optional)"
          fi
        done
        
        # Check for Python animation files
        if ls *.py 1> /dev/null 2>&1; then
          echo "‚úÖ Python animation files found"
          echo "Animation files: $(ls *.py | wc -l)"
        else
          echo "‚ùå No Python files found"
          exit 1
        fi

  # Job 4: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run basic security checks
      run: |
        # Check for common security issues in Python files
        echo "üîç Scanning for potential security issues..."
        
        # Check for hardcoded secrets (basic patterns)
        if grep -r -i "password\s*=" *.py 2>/dev/null; then
          echo "‚ö†Ô∏è Found potential hardcoded passwords"
        fi
        
        if grep -r -i "api_key\s*=" *.py 2>/dev/null; then
          echo "‚ö†Ô∏è Found potential hardcoded API keys"
        fi
        
        if grep -r "import os" *.py && grep -r "os.system" *.py 2>/dev/null; then
          echo "‚ö†Ô∏è Found os.system usage - review for security"
        fi
        
        echo "‚úÖ Basic security scan completed"

# Summary job that depends on all others
  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [code-quality, manim-tests, documentation, security]
    if: always()
    
    steps:
    - name: Check overall status
      run: |
        echo "üéØ CI/CD Pipeline Summary:"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Manim Tests: ${{ needs.manim-tests.result }}"
        echo "Documentation: ${{ needs.documentation.result }}"
        echo "Security: ${{ needs.security.result }}"
        
        if [[ "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.manim-tests.result }}" == "success" && 
              "${{ needs.documentation.result }}" == "success" && 
              "${{ needs.security.result }}" == "success" ]]; then
          echo "‚úÖ All checks passed! Repository is ready for deployment."
        else
          echo "‚ùå Some checks failed. Please review the issues above."
        fi